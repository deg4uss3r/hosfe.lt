name: Test and Deploy
on: [pull_request, push]
jobs:
  test:
    strategy:
      matrix:
        rust-toolchain: [stable]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust-toolchain }}
    - name: Add wasm32-wasi Rust target
      run: rustup target add wasm32-wasi --toolchain ${{ matrix.rust-toolchain }}
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    - name: Install fmt
      run: rustup component add rustfmt
      shell: bash
    - name: Install clippy
      run: rustup component add clippy
      shell: bash
    - name: Install audit
      run: cargo install cargo-audit
      shell: bash
    - name: Check binaries and format
      run: RUSTFLAGS="--deny warnings" cargo check --bins --target wasm32-wasi && cargo fmt -- --check
      shell: bash
    - name: clippy
      run: cargo clippy
      shell: bash
    - name: audit
      run: cargo audit
      shell: bash
    - name: build
      run: cargo build
      shell: bash
  deploy:
    if: |
      startsWith(github.ref, 'refs/tags/v') && needs.test.result == 'success'
    runs-on: ubuntu-latest
    environment: deploy
    needs: [test]
    steps: 
    - uses: actions/checkout@v3
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
          toolchain: 1.54.0 # current Rust toolchain for Compute
          target: wasm32-wasi # WebAssembly target
    - name: Deploy
      uses: fastly/compute-actions@v5
      with:
        verbose: true
      env:
        FASTLY_API_TOKEN: ${{ secrets.FASTLY_API_TOKEN }}