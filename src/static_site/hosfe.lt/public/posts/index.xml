<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Ricky Hosfelt</title>
		<link>https://hosfe.lt/posts/</link>
		<description>Recent content in Posts on Ricky Hosfelt</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>2023</copyright>
		<lastBuildDate>Fri, 05 Jan 2024 09:18:47 -0500</lastBuildDate>
		<atom:link href="https://hosfe.lt/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>It&#39;s 2024 and This Blog is Now On The Edge</title>
			<link>https://hosfe.lt/posts/edge/</link>
			<pubDate>Fri, 05 Jan 2024 09:18:47 -0500</pubDate>
			
			<guid>https://hosfe.lt/posts/edge/</guid>
			<description>I&amp;rsquo;m Six Feet From The Edge and I&amp;rsquo;m Thinking&amp;hellip; Well, unlike that Classic Creed Song One Last Breath that was on the radio when I was a kid I&amp;rsquo;m actually on the edge! However, not in the way the song was intended, definitely in a technical sense.
I am taking advantage of learning at my new job by utilizing Fastly&amp;rsquo;s Edge Compute service and deploying this blog from their edge network making this site 100% delivered from a WASM pre-compiled binary.</description>
			<content type="html"><![CDATA[<h1 id="im-six-feet-from-the-edge-and-im-thinking">I&rsquo;m Six Feet From The Edge and I&rsquo;m Thinking&hellip;</h1>
<p>Well, unlike that <a href="https://www.youtube.com/watch?v=qnkuBUAwfe0">Classic Creed Song</a> <em>One Last Breath</em> that was on the radio when I was a kid I&rsquo;m actually on the edge! However, not in the way the song was intended, definitely in a technical sense.</p>
<p>I am taking advantage of learning at my new job by utilizing <a href="htttps://fastly.com">Fastly&rsquo;s</a> Edge Compute service and deploying this blog from their edge network making this site 100% delivered from a WASM pre-compiled binary. In this post I&rsquo;ll be explaining how I did it along with some lessons I learned along the way.</p>
<h2 id="why-i-put-the-blog-on-the-edge">Why I Put The Blog On The Edge</h2>
<p>Previously, for about 10 years I have been using the same <a href="https://digitalocean.com">Digital Ocean</a> Droplet as a Virtual Private Server (VPS) serving my site. I have no complaints and it&rsquo;s only costed me about $7/month to have a website that I can do almost anything with! However, it&rsquo;s gotten pretty out-of-date on the backend and I did not have a real good way to fully automate a deployment without doing (in my opinion) a lot of work. Plus, a new friend saw my certificates were expired again and pushed me to start digging more into better ways to manage those (thanks Colton!).</p>
<h3 id="but-what-advantage-does-the-edge-have">But What Advantage Does The Edge Have?</h3>
<p>Many people will be able to describe this better than me, <a href="https://www.fastly.com/blog/no-origin-static-websites-at-the-edge">Kats for example here</a>, but for me the main advantage is freeing up my VPS for updating, more experiments, learning a new technology, and hosting a faster blog around the world.</p>
<h3 id="in-your-own-wordswhat-is-the-edge">In Your Own Words&hellip;What Is The Edge?</h3>
<p>The Edge is essentially a CDN but instead of content sitting in cache around the world it is computed on the fly when requested at the site that&rsquo;s closest. Both a CDN and the Edge offer faster websites and I wanted to move closer to one repository and deploy method for the site. That and since my site is <em>so simple</em> I opted for compute instead of a traditional CDN.</p>
<p>Finally I could take advantage of things like <a href="https://docs.fastly.com/products/certainly">Certianly</a> and never have to worry about updating my TLS certificates again, something that definitely happened to me at least twice a year while I was trying to get <code>certbot</code> to play nice with cron jobs (not a knock against it, <a href="https://letsencrypt.org/">Let&rsquo;s Encrypt</a> is an amazing resource and pretty much the only reason I&rsquo;ve had a website for so long).</p>
<h2 id="how-to-get-started">How To Get Started</h2>
<p>There&rsquo;s essentially two paths you have to work on in parallel the raw code for the blog and the setting up of the networking to point to the edge network to serve said code.</p>
<h3 id="some-warnings-first">Some Warnings First</h3>
<p>I am definitely not done with the blog that&rsquo;s for sure! As well as I am very certain there are better ways to do things but I wanted to give a little insight into how I learned and pieced together the information to get this working. If you have any suggestion throw in <a href="https://github.com/deg4uss3r/hosfe.lt/issues">an issue</a> for me!</p>
<p><strong>DISCLAIMER</strong> I am a Fastly employee (and very new). So anything in the blog does not speak for Fastly itself but my own personal experience using the products they provide.</p>
<p>Finally, this blog and post (and my life) will be centered around Rust. There&rsquo;s plenty of resources for other languages (like <a href="https://developer.fastly.com/learning/compute/javascript/">JavaScript</a> and <a href="https://developer.fastly.com/learning/compute/go/">Go</a>, but I know very little about those).</p>
<h3 id="the-blogs-code">The Blog&rsquo;s Code</h3>
<p>The main focus of this section will be my <code>main.rs</code> Rust module (<a href="https://github.com/deg4uss3r/hosfe.lt/src/main.rs">on GitHub</a>). The source HTML is also in there but that is less interesting and I will briefly cover that later.</p>
<p>The main content is very simple just a large <code>match</code> statement based off of the incoming request&rsquo;s path and then serving that in a response through pre-compiled HTML. essentially this boils down to very few lines of code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">match</span><span class="w"> </span><span class="n">req</span><span class="p">.</span><span class="n">get_path</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#34;/&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">include_str!</span><span class="p">(</span><span class="s">&#34;../index.html&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">include_str!</span><span class="p">(</span><span class="s">&#34;../404.html&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w"> 
</span></span></span></code></pre></div><p>Yes, astute readers will realize that every new page will need a new line to that match statement; however, it&rsquo;s a small price to pay for this being <em>incredibly simple</em>. I could setup some glob matches if I hosted the pages on an external service (e.g. S3, Droplet, etc.). That&rsquo;s something I&rsquo;d like to explore on a future date but for now this is fast, convenient, and fits nicely into a simple enough workflow for a very casual website updater 😅.</p>
<p>A quick note on the <code>include_str!()</code> <a href="https://doc.rust-lang.org/std/macro.include_str.html">macro</a>. If you&rsquo;re not immediately familiar this is including the input file in the compiled binary. So while sacrificing binary size by including the text there&rsquo;s no file system lookup or network hit required to serve each request. It also has the advantage that if that file does not exist the binary will not compile so I cannot serve you a file that does not exist (but I can leave out files that <em>do</em> exist).</p>
<h3 id="okay-but-how-do-you-get-started">Okay, But How Do You Get Started?</h3>
<p>So that is all simple enough but getting started was a little bit confusing for me (I could not find a specific set of cohesive steps to get started) so I&rsquo;ll walk through how I did it. Previous caveats apply here, this is information I cobbled together and not the <em>best</em> way but a way that works for me.</p>
<p>Throughout this guide I&rsquo;ll be using Fastly as mentioned previously.</p>
<p>First, I created my <a href="https://manage.fastly.com/home">Fastly account</a>. Your experience here will vary please check the prices and understand the cost before you proceed.</p>
<p>Next, is to create a compute service. Do not worry about a domain or host for now you can set it to anything you want and change it later. We will use the test generated link and setup the networking later. Make sure to save your <code>service_id</code> as it will be necessary to push an update to that newly created service.</p>
<p>To use the Fastly CLI (next step) you&rsquo;ll need a new token with permissions to do so. In the Fastly Management domain go to your Profile (upper right) &gt; Account &gt; API Tokens (lower left) and generate an API token with Global API Access both the first option (<code>Global</code>) for full control and Global Read (<code>global:read</code> is enable by default but write is not).</p>
<p class="warning">make _sure_ you save this token off as soon as you navigate away from this screen you will lose access to display the token again for security reasons.</p>
<p class="warning">make sure to keep this safe it's a secret and just like an AWS S3 key could cost you a lot of money if you leak it. I suggest immediately storing it in a password manager like [1Password](https://1password.com/) so you can access it safely and from the CLI (I'll show you how to do this as well). Finally, for security I do recommend letting this expire and generating a new one roughly every 6 months.</p>
<p>After that I installed the <a href="https://developer.fastly.com/reference/cli/">Fastly CLI</a> (or you can do everything from the web if you prefer but I like using CLIs so I do when I can). For me that was as simple as following the <code>brew install fastly/tap/fastly</code> command.</p>
<p>Next up we&rsquo;ll test out a working CLI interface. I use 1Password&rsquo;s CLI to help insert secrets without leaking them (read the install instructions here: <a href="https://developer.1password.com/docs/cli/get-started/">1Password CLI</a>); however, you can do what you are most comfortable with (both security and tool-wise). The command I would recommend running first is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fish" data-lang="fish"><span class="line"><span class="cl">~<span class="c"># fastly whoami --token $(op item get &#34;$YOUR_FASTLY_ITEM_NAME&#34; --fields $YOUR_API_TOKEN_FIELD_NAME)
</span></span></span></code></pre></div><p>If you get an output with your name and email you are good to go! Otherwise it would appear the account token you&rsquo;ve generated isn&rsquo;t working or you have a previous configuration somewhere that is messing with it. Reach out to the <a href="https://developer.fastly.com/">Fastly Developer Docs</a> or the <a href="https://community.fastly.com/">Contact the community</a> for additional help.</p>
<p>Once you have a successful result from <code>whoami</code> you&rsquo;re ready to push to your service! I would recommend following the <a href="https://github.com/fastly/compute-starter-kit-rust-default">Rust template repository</a> by forking it and pushing a single simple page (e.g. one match arm with the catchall as well) with anything you want. Do so by calling the following inside the template repo:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fish" data-lang="fish"><span class="line"><span class="cl">~<span class="c"># fastly compute publish --token $YOUR_TOKEN --service-id $YOUR_SERVICE_ID
</span></span></span></code></pre></div><p>Once that deploys you can check it via the Management portal, click on Compute &gt; Your Service &gt; Version Number &gt; Then you should see &ldquo;Test Domain&rdquo; next to your domain.</p>
<p>As you get more complex or if you want to test the binary locally you can do so very easily just:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fish" data-lang="fish"><span class="line"><span class="cl">~<span class="c"># fastly compute serve
</span></span></span></code></pre></div><p class="idea">That will create the binary and host it locally to `127.0.0.1:7676`</p>
<p>There&rsquo;s quite a few starter kits (including in different languages) on the <a href="https://github.com/search?q=%22fastly%2Fcompute-starter-kit%22+owner%3Afastly+&amp;type=repositories">Fastly Organization</a> take a look through I just picked the one I found the simplest to get started!</p>
<h4 id="fastlys-template-structure-explained">Fastly&rsquo;s Template Structure Explained</h4>
<p>If you fork one of Fastly&rsquo;s template repositories there&rsquo;s some files in there that probably need a bit of explaining. I&rsquo;ll quickly go over those.</p>
<p><code>rust-toolchain.toml</code> - You might be already familiar with this but it&rsquo;s essentially controlling what version of Rust and what compile targets you need. This one helps compile for WASM which we need for deployment. From here you can add more options but I just left it as default stable toolchain.</p>
<p><code>fastly.toml</code> - This is the controlling file for the options on your Compute service. You&rsquo;ll want to change the author, description, name, and add in the field <code>service_id</code> (I originally thought this was a secret but common practice allows for this in the <code>toml</code>). Adding in <code>service_id</code> now means it will be easier to get the GitHub action working (coming in part 2) as well as you can remove the <code>--service_id</code> option from all future command line arguments.</p>
<p><code>Cargo.toml</code> - I will assume you know the basics here but one thing you&rsquo;ll definitely want to change if you fork is the name (of the package), author, and I also upped the edition from <code>2018</code> to <code>2021</code> with no ill effects. I would recommend keeping <a href="https://doc.rust-lang.org/cargo/reference/manifest.html#the-publish-field">publish</a> to <code>false</code>.</p>
<p><code>README</code> - I definitely forgot to change this at first, so learn from my mistakes!</p>
<p><code>./.github/CODEOWNERS</code> - This is for the Fastly organization and template, change and/or remove this file it won&rsquo;t work anyways!</p>
<h2 id="to-be-continued">To Be Continued&hellip;</h2>
<p>That is pretty much all you need to really get started with the edge using a test domain, In the next post (since this one has gotten a little longer than I anticipated) I&rsquo;ll explain my DNS and deployment setup. I hope this was helpful!</p>
]]></content>
		</item>
		
		<item>
			<title>My Path To Management</title>
			<link>https://hosfe.lt/posts/story/</link>
			<pubDate>Wed, 19 Apr 2023 21:19:00 +0000</pubDate>
			
			<guid>https://hosfe.lt/posts/story/</guid>
			<description>From an early point in my career I have always wanted to lead. Not out of ego, but I have always loved helping others.
In high school I was part of a small company (woo Spearfish Industries, thanks Steve and Dave ;)) that helped local businesses with the internet, websites, graphic design, and videography. This was my entry into computer science and I absolutely loved it I went from the lead graphic designer to the network admin and started to really enjoy setting up routers and explaining the settings to grandmas and business owners alike.</description>
			<content type="html"><![CDATA[<p>From an early point in my <a href="https://ricky.hosfelt.dev/resume/">career</a> I have always wanted to lead. Not out of ego, but I have always loved helping others.</p>
<p>In high school I was part of a small company (woo Spearfish Industries, thanks Steve and Dave ;)) that helped local businesses with the internet, websites, graphic design, and videography. This was my entry into computer science and I absolutely loved it I went from the lead graphic designer to the network admin and started to really enjoy setting up routers and explaining the settings to grandmas and business owners alike.</p>
<p>Cue to <a href="https://iup.edu">university</a> where I made a small mistake, much to my friends future-sight, of majoring in business rather than engineering. I knew I had made a bad choice in my second semester but barely making ends meet with 2 part time jobs and no connections a degree is better than nothing I thought. So I continued on with ease and taking all the math my schedule would allow. Then graduated with a BS in Human Resources Management in 3 years.</p>
<p>Afterwards, I was extremely lucky to get a job a huge place (the US government) as a technical recruiter for their cooperative education program. After a year a two (and starting my masters in engineering) I was able to transfer to a technical office that took a chance on me (infinite thanks to Jackie and Dave) and I found a new love, network protocols.</p>
<p>Protocols are the formats and standards of information transfer and understanding them and their specifications (<a href="https://datatracker.ietf.org/doc/html/rfc8962">RFC</a>s) is a wonder. I got to see brand new things, reverse engineer modifications, and write software (think <a href="https://www.wireshark.org/">Wireshark</a> but not in Lua) to accurately and efficiently parse them.</p>
<p>I was good at this. Really good. In just a year, I was a respected team lead and selected for a lot of really amazing opportunities that I cannot go into too much details on.</p>
<p>I then was able to accept a special assignment teaching protocols and software development in England. It was a blast and I really enjoyed getting the opportunity to live and travel so much (not bad for someone who got their passport at 23!). I took full advantage of this opportunity and soon came to realize I wanted more and the leadership aspect came back.</p>
<p>After leading some really cool projects with the <a href="https://www.elastic.co/what-is/elk-stack">ELK</a> stack, refining proper software engineering guidelines, and implementing <a href="https://www.rust-lang.org/">Rust</a> in production software I was not moving and advancing fast enough (cue red tape). I then decided it was time to leave the government and take some risks for my career development.</p>
<p>My next opportunity was short but no less amazing. I got the amazing ability to work with Machine Learning as a strict software developer at <a href="https://www.sei.cmu.edu/">Carnegie Mellon University’s Software Engineering Institute</a> (CMU, SEI). Thank you to Matt, Dave, Ritwik, Erik, Jay, and Carol. My favorite thing I got to do there was <a href="https://xview2.org/">xView2</a> it was an amazing humanitarian project (thanks Nirav and Bryce ;)) that helps first responders understand and accesses damage to areas by satellite imagery and Machine Learning on the edge.</p>
<p>After that project was done I did understand ML, but I knew it wasn’t my passion and I needed to follow what I truly wanted to do. I really enjoy both Rust (I think that’s obvious if you made it this far) and using technology for good. One lucky day I saw a job opportunity in This Week in Rust for a little company called <a href="https://1Password.com">1Password</a>.</p>
<p>After some research into this company I was sold. Managing passwords for everyone including grandparents and fellow developers with strong technical challenges and an amazing reputation for being kind and helping others, what’s not to love?!</p>
<p>That gamble, at the time anyone in the US was considered an independent contractor, definitely paid off. I was a Senior Rust Engineer (I am so proud of myself as I look back on this). I never thought I make it this far (thanks to Roo, Dave, Roustem, Beyer, and Mathieu). The work here has been amazing, I have helped with so much (localization, build and release, permission checking and hardening, performance and optimization, countless bug fixes, and so much more) and yet the most I got enjoyment from was again, helping others. Every time I helped someone succeed with building our project the happier I got.</p>
<p>Then I got to a crux, I am a great developer but my skills are most satisfied and amplified when I put them to use helping my peers. Also my manager had about 60 reports at the time! So I proposed that we start hiring engineering managers in our organization at this 250 person company. The response was “Yes! I don’t know how to get you there but help me hire the first one”.</p>
<p>It wasn’t a long process (Hello and thanks Chris ;)), then I got the ask “Would you like to be one as well?” and accepted my first management role! It was the best decision I’ve made yet. I was offered to take on the iOS team for 1Password and help maintain 1Password 7 for iOS and macOS as well as ship 1Password 8 for iOS.</p>
<p>This was both extremely exciting and a huge challenge. OPI8 was not quite ready and we had a “development pause” while the Desktop applications shipped their versions. During this time I was also learning the fundamentals of being a manager such as; holding 1:1s, resolving disputes, planning and organizing features, hiring, coordinating developers for sub teams, and also contributing Rust code that was helpful for my team.</p>
<p>To get out of the pause I had planned (a post on this coming in the future) a large scale re-ignition effort and push to eliminate the current tech debt and set us up nice for the final push to release. This period lasted 2 months and we were able to finish exact on time with all issue on our Milestone closed! Really a huge effort and monumental win for the team, something I am very proud of to this day.</p>
<p>After that, we were ready to begin the push for both a TestFlight and eventually a final release to the world. We started many initiatives and helpful models that enabled us to keep development focused and hit our goals for release. We worked very close (closer than every before at our company) with design and product to ensure all features were development ready when the designs were completed and product made the final decisions to include at our initial launch.</p>
<p>Then the time came! OPI8 was released to the world with, honestly a resounding success! Our customers really love 1Password 8 for iOS and I am very proud of the team (Kevin, Rudy, Chad, Craig, Craig, Drew, Brian, Chris, Chris, Alessandro, Julieta, Jeanine, you all rock!). It’s one of the best moments I’ve had in my career by far, over 1 million people using an application I helped lead to success!</p>
<p>We’re almost to the present day I swear.</p>
<p>My experience in my current role began soon after the OPI8 release; a reorganization! The entire engineering organization at 1Password went through a reorganization that lead to me getting to not only really build a new team that is very different the my OPI team, but also help (thanks to Katherine, Emily, Avi, Chris, and Chris!) shape an entire organization since we reported directly to the CTO who filled the positions of Director and VP of Engineering.</p>
<p>It was here where I was able to learn and try new things that gave me a lot of experience with a vastly different group of engineers. I now manage Rust, Swift, Kotlin, and Typescript engineers on a Frameworks team that focuses on designing scaleable, efficient, testable, and safe APIs for other developers to use.</p>
<p>The team is now functioning well and I am successfully leading them to update our APIs and create easy-to-use frameworks for development that allow us and other teams to not worry about discovery or how to model the problem because we have strong guidelines on that already.</p>
<p>Thank you if you’ve made it this far as you’re up-to-date with my career now! I’ll keep adding to this as things change but I am hoping this at least gives you a glimpse into what makes Ricky himself at work.</p>
<ul>
<li>RH</li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
